# Project Prompt: LaunchPad Market - Advanced Co-Creation E-commerce Platform

## 1. Project Overview

Build a full-stack MERN (MongoDB, Express.js, React, Node.js) web application called **"LaunchPad Market"** - a revolutionary e-commerce platform that combines crowdfunding mechanics with traditional e-commerce features.

### Core Concept
Creators pitch innovative product ideas, and customers "back" them through pre-orders. If a product reaches its funding goal within a deadline, it goes into production and backers are charged. If it fails, no charges occur. Successfully funded products transition to a marketplace where they can be purchased normally, building a community-driven ecosystem that validates ideas before mass production.

### What Makes This Unique
- **Dual-mode marketplace**: Crowdfunding + Traditional E-commerce
- **Risk-free backing**: Payment authorization without immediate charging
- **Community validation**: Products proven by market demand
- **Creator empowerment**: Direct creator-to-consumer relationship
- **Social proof system**: Reviews, ratings, and community engagement

---

## 2. Technology Stack (Strictly MERN)

### Frontend
- **React** (using Vite for faster development)
- **React Router DOM** for navigation
- **Context API + useReducer** for state management
- **Axios** for API calls
- **Tailwind CSS** for modern, responsive UI
- **React Hook Form** for form handling
- **React Toastify** for notifications

### Backend
- **Node.js** with Express.js
- **Express Validator** for input validation
- **bcryptjs** for password hashing
- **jsonwebtoken (JWT)** for authentication
- **node-cron** for scheduled tasks
- **multer** for file uploads
- **cors** for cross-origin requests

### Database
- **MongoDB** with Mongoose ODM
- **MongoDB Aggregation Pipeline** for analytics

### Payment Processing
- **Stripe** for payment intents and authorization
- Secure payment flow with webhook handling

### Development Tools
- **dotenv** for environment variables
- **nodemon** for development server
- **ESLint** for code quality
- **Postman/Thunder Client** for API testing

**NO other frameworks, databases, or technologies outside MERN stack should be used.**

---

## 3. User Roles & Permissions

### Guest (Unauthenticated)
- Browse all products (funding + marketplace)
- Search and filter products
- View product details, reviews, and ratings
- View creator profiles
- Access to public pages only

### Backer (Authenticated User)
- All Guest privileges
- Back crowdfunding projects
- Add products to wishlist
- Purchase marketplace products
- Add items to cart and checkout
- Write reviews and ratings (only for purchased/received items)
- Comment on product concepts
- Track order history and status
- Manage profile and preferences
- Receive personalized recommendations

### Creator (Special Authenticated Role)
- All Backer privileges
- Create and manage product concepts
- Access Creator Dashboard with analytics
- View project performance metrics
- Manage product inventory (post-funding)
- Respond to comments and reviews
- Update project status and information
- View revenue and sales reports

### Admin (Super User)
- Full system access
- User management (view, suspend, delete users)
- Product moderation (approve, reject, remove)
- Order management and dispute resolution
- Sales analytics and reporting
- Category and tag management
- System configuration
- View platform-wide metrics

---

## 4. Database Schema Design (MongoDB/Mongoose)

### A. User Schema
```javascript
{
  name: { type: String, required: true, trim: true },
  email: { type: String, required: true, unique: true, lowercase: true },
  password: { type: String, required: true }, // bcrypt hashed
  role: { 
    type: String, 
    enum: ['Backer', 'Creator', 'Admin'], 
    default: 'Backer' 
  },
  profileImage: { type: String, default: '' },
  bio: { type: String, maxlength: 500 },
  phone: { type: String },
  address: {
    street: String,
    city: String,
    state: String,
    zipCode: String,
    country: String
  },
  backedProjects: [{ type: Schema.Types.ObjectId, ref: 'PreOrder' }],
  wishlist: [{ type: Schema.Types.ObjectId, ref: 'ProductConcept' }],
  cart: [{
    product: { type: Schema.Types.ObjectId, ref: 'ProductConcept' },
    quantity: { type: Number, default: 1 }
  }],
  isVerified: { type: Boolean, default: false },
  isActive: { type: Boolean, default: true },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}
```

### B. ProductConcept Schema
```javascript
{
  creator: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  title: { type: String, required: true, trim: true },
  slug: { type: String, unique: true, lowercase: true },
  description: { type: String, required: true },
  detailedDescription: { type: String },
  images: [{ type: String, required: true }], // Array of image URLs
  price: { type: Number, required: true },
  
  // Crowdfunding specific fields
  fundingGoal: { type: Number, required: true }, // Target number of pre-orders
  currentFunding: { type: Number, default: 0 }, // Current number of pre-orders
  deadline: { type: Date, required: true },
  
  // Marketplace specific fields (post-funding)
  stockQuantity: { type: Number, default: 0 },
  soldQuantity: { type: Number, default: 0 },
  
  status: { 
    type: String, 
    enum: ['Funding', 'Successful', 'Failed', 'InProduction', 'Marketplace', 'OutOfStock', 'Discontinued'], 
    default: 'Funding' 
  },
  
  category: { type: String, required: true, trim: true },
  tags: [{ type: String, trim: true }],
  
  // Reviews and ratings
  reviews: [{ type: Schema.Types.ObjectId, ref: 'Review' }],
  averageRating: { type: Number, default: 0, min: 0, max: 5 },
  totalReviews: { type: Number, default: 0 },
  
  comments: [{ type: Schema.Types.ObjectId, ref: 'Comment' }],
  
  // Analytics
  views: { type: Number, default: 0 },
  likes: { type: Number, default: 0 },
  
  isApproved: { type: Boolean, default: false }, // Admin approval
  isFeatured: { type: Boolean, default: false },
  
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}
```

### C. PreOrder Schema
```javascript
{
  backer: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  productConcept: { type: Schema.Types.ObjectId, ref: 'ProductConcept', required: true },
  quantity: { type: Number, default: 1, min: 1 },
  totalPrice: { type: Number, required: true },
  stripePaymentIntentId: { type: String, required: true },
  status: { 
    type: String, 
    enum: ['Authorized', 'Paid', 'Cancelled', 'Refunded'], 
    default: 'Authorized' 
  },
  shippingAddress: {
    street: { type: String, required: true },
    city: { type: String, required: true },
    state: { type: String, required: true },
    zipCode: { type: String, required: true },
    country: { type: String, required: true }
  },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}
```

### D. Order Schema (for marketplace purchases)
```javascript
{
  buyer: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  items: [{
    product: { type: Schema.Types.ObjectId, ref: 'ProductConcept', required: true },
    quantity: { type: Number, required: true, min: 1 },
    price: { type: Number, required: true }
  }],
  totalAmount: { type: Number, required: true },
  paymentMethod: { type: String, required: true },
  stripePaymentIntentId: { type: String, required: true },
  paymentStatus: { 
    type: String, 
    enum: ['Pending', 'Completed', 'Failed', 'Refunded'], 
    default: 'Pending' 
  },
  orderStatus: { 
    type: String, 
    enum: ['Processing', 'Confirmed', 'Shipped', 'Delivered', 'Cancelled'], 
    default: 'Processing' 
  },
  shippingAddress: {
    street: { type: String, required: true },
    city: { type: String, required: true },
    state: { type: String, required: true },
    zipCode: { type: String, required: true },
    country: { type: String, required: true }
  },
  trackingNumber: { type: String },
  estimatedDelivery: { type: Date },
  deliveredAt: { type: Date },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}
```

### E. Review Schema
```javascript
{
  author: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  product: { type: Schema.Types.ObjectId, ref: 'ProductConcept', required: true },
  rating: { type: Number, required: true, min: 1, max: 5 },
  title: { type: String, required: true, trim: true },
  comment: { type: String, required: true },
  images: [{ type: String }], // Optional review images
  isVerifiedPurchase: { type: Boolean, default: false },
  helpfulCount: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}
```

### F. Comment Schema
```javascript
{
  author: { type: Schema.Types.ObjectId, ref: 'User', required: true },
  productConcept: { type: Schema.Types.ObjectId, ref: 'ProductConcept', required: true },
  text: { type: String, required: true },
  parentComment: { type: Schema.Types.ObjectId, ref: 'Comment' }, // For nested replies
  replies: [{ type: Schema.Types.ObjectId, ref: 'Comment' }],
  likes: { type: Number, default: 0 },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
}
```

### G. Category Schema
```javascript
{
  name: { type: String, required: true, unique: true, trim: true },
  slug: { type: String, required: true, unique: true, lowercase: true },
  description: { type: String },
  image: { type: String },
  parentCategory: { type: Schema.Types.ObjectId, ref: 'Category' },
  isActive: { type: Boolean, default: true },
  createdAt: { type: Date, default: Date.now }
}
```

---

## 5. Backend API Endpoints (RESTful Architecture)

All routes prefixed with `/api`

### A. Authentication Routes (`/api/auth`)
- `POST /register` - Register new user
- `POST /login` - Login user, return JWT
- `POST /logout` - Logout user (clear token client-side)
- `GET /me` - Get current user data (protected)
- `POST /forgot-password` - Request password reset
- `POST /reset-password/:token` - Reset password with token
- `PUT /change-password` - Change password (protected)

### B. User Routes (`/api/users`)
- `GET /:id/profile` - Get public user profile
- `PUT /profile` - Update own profile (protected)
- `POST /profile/image` - Upload profile image (protected)
- `GET /wishlist` - Get user's wishlist (protected)
- `POST /wishlist/:productId` - Add to wishlist (protected)
- `DELETE /wishlist/:productId` - Remove from wishlist (protected)
- `GET /recommendations` - Get personalized recommendations (protected)

### C. Product Routes (`/api/products`)
- `GET /` - Get all products (with pagination, filtering, sorting)
  - Query params: `?category=tech&status=Funding&sort=deadline&page=1&limit=12`
- `GET /featured` - Get featured products
- `GET /trending` - Get trending products
- `GET /search` - Search products by title/description
  - Query: `?q=smartphone&category=tech`
- `GET /:id` - Get single product by ID
- `POST /` - Create new product (Creator only, protected)
- `PUT /:id` - Update product (Creator/Admin, protected)
- `DELETE /:id` - Delete product (Creator/Admin, protected)
- `POST /:id/images` - Upload product images (Creator, protected)
- `POST /:id/like` - Like/unlike product (protected)
- `POST /:id/view` - Increment view count

### D. PreOrder Routes (`/api/preorders`)
- `POST /create-payment-intent` - Create Stripe payment intent (protected)
- `POST /` - Create new pre-order (protected)
- `GET /my-preorders` - Get user's pre-orders (protected)
- `GET /:id` - Get single pre-order details (protected)
- `PUT /:id/cancel` - Cancel pre-order (protected)

### E. Order Routes (`/api/orders`)
- `POST /create-payment` - Create payment for marketplace order (protected)
- `POST /` - Create new order (protected)
- `GET /my-orders` - Get user's orders (protected)
- `GET /:id` - Get single order details (protected)
- `PUT /:id/cancel` - Cancel order (protected)
- `GET /:id/track` - Get order tracking info (protected)

### F. Cart Routes (`/api/cart`)
- `GET /` - Get user's cart (protected)
- `POST /add` - Add item to cart (protected)
- `PUT /update/:productId` - Update item quantity (protected)
- `DELETE /remove/:productId` - Remove item from cart (protected)
- `DELETE /clear` - Clear entire cart (protected)

### G. Review Routes (`/api/reviews`)
- `GET /product/:productId` - Get all reviews for a product
- `POST /` - Create new review (protected, verified purchase only)
- `PUT /:id` - Update own review (protected)
- `DELETE /:id` - Delete own review (protected)
- `POST /:id/helpful` - Mark review as helpful (protected)

### H. Comment Routes (`/api/comments`)
- `GET /product/:productId` - Get all comments for a product
- `POST /` - Create new comment (protected)
- `POST /:id/reply` - Reply to a comment (protected)
- `PUT /:id` - Update own comment (protected)
- `DELETE /:id` - Delete own comment (protected)
- `POST /:id/like` - Like/unlike comment (protected)

### I. Category Routes (`/api/categories`)
- `GET /` - Get all categories
- `GET /:id` - Get category by ID
- `POST /` - Create category (Admin only)
- `PUT /:id` - Update category (Admin only)
- `DELETE /:id` - Delete category (Admin only)

### J. Creator Dashboard Routes (`/api/creator`)
- `GET /dashboard` - Get creator dashboard overview (Creator only)
- `GET /projects` - Get all creator's projects (Creator only)
- `GET /analytics/:productId` - Get product analytics (Creator only)
- `GET /earnings` - Get earnings summary (Creator only)

### K. Admin Routes (`/api/admin`)
- `GET /dashboard` - Get admin dashboard stats (Admin only)
- `GET /users` - Get all users with pagination (Admin only)
- `PUT /users/:id/status` - Activate/deactivate user (Admin only)
- `DELETE /users/:id` - Delete user (Admin only)
- `GET /products/pending` - Get products pending approval (Admin only)
- `PUT /products/:id/approve` - Approve product (Admin only)
- `PUT /products/:id/reject` - Reject product (Admin only)
- `GET /orders` - Get all orders (Admin only)
- `GET /analytics` - Get platform analytics (Admin only)
- `GET /sales-report` - Generate sales report (Admin only)

---

## 6. Advanced Backend Logic

### A. Automated Deadline Checker (node-cron)
Create a scheduled job that runs daily at midnight:

```javascript
// Check all products with status 'Funding' and passed deadline
cron.schedule('0 0 * * *', async () => {
  const now = new Date();
  const expiredProjects = await ProductConcept.find({
    status: 'Funding',
    deadline: { $lt: now }
  });

  for (let project of expiredProjects) {
    if (project.currentFunding >= project.fundingGoal) {
      // SUCCESS: Capture all authorized payments
      project.status = 'Successful';
      await captureAllPreOrderPayments(project._id);
      // Send success email to creator and backers
      // Update status to 'InProduction'
    } else {
      // FAILED: Cancel all payment intents
      project.status = 'Failed';
      await cancelAllPreOrderPayments(project._id);
      // Send failure email to creator and backers
    }
    await project.save();
  }
});
```

### B. Payment Processing Logic
- **Pre-orders**: Use Stripe Payment Intent with `capture_method: 'manual'`
- **Marketplace orders**: Standard Stripe payment capture
- Implement Stripe webhooks for payment confirmations
- Handle refunds and cancellations

### C. Recommendation Engine
Simple recommendation algorithm based on:
- User's backed/purchased products
- Category preferences
- Popular products in similar categories
- Trending items

### D. Analytics Aggregation
Use MongoDB aggregation pipeline for:
- Total sales per product
- Revenue trends
- User engagement metrics
- Conversion rates (views to backs/purchases)

---

## 7. Frontend Structure (React + Vite)

### Project Structure
```
client/
├── public/
│   └── assets/
├── src/
│   ├── components/
│   │   ├── common/
│   │   │   ├── Navbar.jsx
│   │   │   ├── Footer.jsx
│   │   │   ├── Button.jsx
│   │   │   ├── Input.jsx
│   │   │   ├── Modal.jsx
│   │   │   ├── Loader.jsx
│   │   │   └── Pagination.jsx
│   │   ├── product/
│   │   │   ├── ProductCard.jsx
│   │   │   ├── ProductGrid.jsx
│   │   │   ├── ProgressBar.jsx
│   │   │   ├── ProductFilter.jsx
│   │   │   └── ProductSort.jsx
│   │   ├── cart/
│   │   │   ├── CartItem.jsx
│   │   │   └── CartSummary.jsx
│   │   ├── review/
│   │   │   ├── ReviewCard.jsx
│   │   │   ├── ReviewForm.jsx
│   │   │   └── RatingStars.jsx
│   │   └── comment/
│   │       ├── CommentCard.jsx
│   │       └── CommentForm.jsx
│   ├── pages/
│   │   ├── HomePage.jsx
│   │   ├── ProductDetailPage.jsx
│   │   ├── ProductsPage.jsx (Browse all)
│   │   ├── LoginPage.jsx
│   │   ├── RegisterPage.jsx
│   │   ├── ProfilePage.jsx
│   │   ├── WishlistPage.jsx
│   │   ├── CartPage.jsx
│   │   ├── CheckoutPage.jsx
│   │   ├── OrdersPage.jsx
│   │   ├── OrderDetailPage.jsx
│   │   ├── CreatorDashboard.jsx
│   │   ├── CreateProductPage.jsx
│   │   ├── EditProductPage.jsx
│   │   ├── AdminDashboard.jsx
│   │   └── NotFoundPage.jsx
│   ├── context/
│   │   ├── AuthContext.jsx
│   │   ├── CartContext.jsx
│   │   └── WishlistContext.jsx
│   ├── hooks/
│   │   ├── useAuth.js
│   │   ├── useCart.js
│   │   └── useDebounce.js
│   ├── services/
│   │   ├── api.js (Axios config)
│   │   ├── authService.js
│   │   ├── productService.js
│   │   ├── orderService.js
│   │   └── paymentService.js
│   ├── utils/
│   │   ├── helpers.js
│   │   ├── validators.js
│   │   └── constants.js
│   ├── routes/
│   │   ├── PrivateRoute.jsx
│   │   ├── CreatorRoute.jsx
│   │   └── AdminRoute.jsx
│   ├── App.jsx
│   ├── main.jsx
│   └── index.css (Tailwind imports)
└── package.json
```

### Key Pages Implementation

#### HomePage.jsx
- Hero section with platform introduction
- Featured/trending products carousel
- Products by category
- Success stories section
- Call-to-action for creators

#### ProductDetailPage.jsx
- Image gallery with zoom
- Product information and description
- Funding progress bar (for funding status)
- Creator information card
- "Back This Project" or "Add to Cart" button
- Comments section with nested replies
- Reviews and ratings (for marketplace products)
- Recommended similar products

#### CreatorDashboard.jsx
- Overview stats (total projects, revenue, backers)
- Active projects list
- Charts showing funding progress
- Recent comments and reviews
- Create new product button
- Analytics per product

#### AdminDashboard.jsx
- Platform-wide statistics
- User management table
- Pending product approvals
- Orders overview
- Sales charts and reports
- Category management

---

## 8. State Management

### Context API Structure

#### AuthContext
```javascript
- currentUser
- token
- isAuthenticated
- login(email, password)
- register(userData)
- logout()
- updateProfile(data)
```

#### CartContext
```javascript
- cartItems
- cartCount
- cartTotal
- addToCart(product, quantity)
- removeFromCart(productId)
- updateQuantity(productId, quantity)
- clearCart()
```

#### WishlistContext
```javascript
- wishlistItems
- wishlistCount
- addToWishlist(productId)
- removeFromWishlist(productId)
- isInWishlist(productId)
```

---

## 9. Security Implementation

### Authentication & Authorization
- Password hashing with bcryptjs (10 salt rounds minimum)
- JWT tokens with expiration (24 hours recommended)
- HTTP-only cookies for token storage (optional)
- Role-based access control middleware
- Protected routes on frontend and backend

### Input Validation
- Express-validator for all API endpoints
- Sanitize user inputs to prevent XSS
- Validate file uploads (type, size limits)
- Email format validation
- Strong password requirements (min 8 chars, mixed case, numbers, symbols)

### API Security
- Rate limiting on sensitive endpoints (login, register)
- CORS configuration with allowed origins
- Helmet.js for security headers
- MongoDB injection prevention through Mongoose
- Stripe webhook signature verification

---

## 10. File Upload Handling

### Image Upload (Multer)
- Store uploaded images in `/uploads` directory
- Implement file size limits (max 5MB per image)
- Accept only image formats (jpg, jpeg, png, webp)
- Generate unique filenames to prevent conflicts
- Create thumbnail versions for optimization (optional but recommended)

### Configuration
```javascript
// Multer configuration
const storage = multer.diskStorage({
  destination: './uploads/products/',
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + Math.random().toString(36).substring(7) + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: (req, file, cb) => {
    const filetypes = /jpeg|jpg|png|webp/;
    const mimetype = filetypes.test(file.mimetype);
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    if (mimetype && extname) {
      return cb(null, true);
    }
    cb(new Error('Only image files are allowed!'));
  }
});
```

---

## 11. Search & Filter Implementation

### Search Functionality
- Real-time search with debouncing (300ms delay)
- Search in product title, description, and tags
- MongoDB text indexes for efficient searching
- Search results with highlighted matches

### Filter Options
- Category filter (multi-select)
- Price range filter (min-max)
- Status filter (Funding, Marketplace)
- Rating filter (4+ stars, 3+ stars, etc.)
- Date filter (newest first, ending soon)

### Sort Options
- Most popular (by views/backs)
- Price: Low to High
- Price: High to Low
- Ending soon (deadline approaching)
- Newest first
- Highest rated

---

## 12. UI/UX Design Guidelines

### Design Principles
- **Modern & Clean**: Minimalist design with plenty of white space
- **Vibrant Accents**: Use gradient colors for CTAs and important elements
- **Card-based Layout**: Products displayed in clean, shadow-elevated cards
- **Micro-interactions**: Hover effects, smooth transitions, loading animations
- **Progress Visualization**: Creative funding progress bars with animations
- **Dark Mode Ready**: Structure CSS for future dark mode implementation

### Color Palette Suggestion
- Primary: Gradient (Purple to Blue) `#6366f1` to `#8b5cf6`
- Secondary: Teal `#14b8a6`
- Success: Green `#10b981`
- Warning: Orange `#f59e0b`
- Error: Red `#ef4444`
- Background: Light gray `#f9fafb`
- Text: Dark gray `#111827`

### Typography
- Headings: Bold, large, attention-grabbing
- Body: Easy-to-read, comfortable line height
- Use font weights strategically for hierarchy

### Responsive Breakpoints
- Mobile: 320px - 768px
- Tablet: 768px - 1024px
- Desktop: 1024px+

### Accessibility
- ARIA labels for interactive elements
- Keyboard navigation support
- Sufficient color contrast ratios
- Alt text for all images
- Focus indicators on form inputs

---

## 13. Unique Features to Implement

### 1. Live Funding Animation
Show real-time progress with animated counters when someone backs a project.

### 2. Creator Spotlight
Homepage section featuring successful creators and their journey.

### 3. Backer Leaderboard
Show top backers who support the most projects (with privacy options).

### 4. Early Bird Rewards
Creators can offer discounts to first X backers.

### 5. Project Updates
Creators can post updates about production progress.

### 6. Social Sharing
Easy sharing to social media with custom cards showing funding progress.

### 7. Email Notifications
- Project funded successfully
- Project you backed is live
- New comment on your project
- Order shipped
- New products in categories you like

### 8. Success Prediction Badge
Algorithm-based indicator showing likelihood of project success.

### 9. Creator Verification Badge
Verified creators get a badge after successful projects.

### 10. Comparison Tool
Users can compare similar products side-by-side.

---

## 14. Environment Variables

### Server (.env)
```
NODE_ENV=development
PORT=5000

# Database
MONGO_URI=mongodb://localhost:27017/launchpad-market

# JWT
JWT_SECRET=your_super_secret_jwt_key_here
JWT_EXPIRE=24h

# Stripe
STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key
STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret

# Email (for notifications)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_password

# Frontend URL
CLIENT_URL=http://localhost:5173
```

### Client (.env)
```
VITE_API_URL=http://localhost:5000/api
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_your_stripe_publishable_key
```

---

## 15. Code Quality Standards

### Backend
- Use async/await for asynchronous operations
- Implement try-catch blocks for error handling
- Create custom error classes for different error types
- Use middleware for repeated logic (auth, validation, error handling)
- Modular code structure with separate route, controller, and service layers
- Comment complex business logic
- Use meaningful variable and function names

### Frontend
- Functional components with React Hooks
- Custom hooks for reusable logic
- PropTypes for type checking (or TypeScript if preferred)
- Component composition over inheritance
- Keep components small and focused
- Extract reusable UI components
- Use React.memo for expensive renders
- Implement error boundaries
- Loading and error states for all async operations

---

## 16. Testing Considerations

### Backend Testing
- Unit tests for utility functions
- Integration tests for API endpoints
- Test authentication and authorization
- Test payment processing flows
- Test cron job logic

### Frontend Testing
- Component rendering tests
- User interaction tests
- Form validation tests
- Protected route tests

### Tools (Optional)
- Jest for unit testing
- React Testing Library for component tests
- Supertest for API testing

---

## 17. Performance Optimization

### Backend
- Database indexing on frequently queried fields (email, slug, category, status)
- Pagination for all list endpoints
- Query result caching for static data
- Optimize MongoDB aggregation pipelines
- Compress API responses
- Lazy loading of relationships

### Frontend
- Code splitting with React.lazy
- Image optimization and lazy loading
- Debounce search inputs
- Memoize expensive calculations
- Reduce bundle size (analyze with Vite build analyzer)
- Use CDN for static assets in production

---

## 18. Deployment Preparation

### Backend Deployment
- Use PM2 or similar for process management
- Configure production MongoDB (MongoDB Atlas)
- Set up HTTPS with SSL certificates
- Configure CORS for production domain
- Environment-specific configurations
- Logging and monitoring setup

### Frontend Deployment
- Build optimized production bundle
- Configure CDN for assets
- Set up custom domain
- Configure redirects for SPA routing

### Recommended Platforms
- Backend: Render, Railway, or DigitalOcean
- Frontend: Vercel, Netlify, or Cloudflare Pages
- Database: MongoDB Atlas (free tier available)

---

## 19. Documentation Requirements

### API Documentation
Create comprehensive API documentation including:
- All endpoints with HTTP methods
- Request parameters and body structure
- Response formats with examples
- Authentication requirements
- Error codes and messages
- Rate limiting information

**Format:** Create a `API_DOCUMENTATION.md` file or use Postman Collection

### README.md
Include:
- Project overview and features
- Technology stack
- Prerequisites
- Installation instructions
- Environment variables setup
- Running the application
- Project structure
- API endpoints summary
- Screenshots (optional but recommended)
- Known issues and limitations
- Future enhancements
- Contributing guidelines
- License information

### Code Comments
- Comment complex business logic
- Document all middleware functions
- Explain algorithm implementations
- Add JSDoc comments for important functions

---

## 20. Error Handling Strategy

### Backend Error Handling

#### Global Error Handler Middleware
```javascript
// errorMiddleware.js
const errorHandler = (err, req, res, next) => {
  let error = { ...err };
  error.message = err.message;

  // Log error for debugging
  console.error(err);

  // Mongoose bad ObjectId
  if (err.name === 'CastError') {
    const message = 'Resource not found';
    error = new ErrorResponse(message, 404);
  }

  // Mongoose duplicate key
  if (err.code === 11000) {
    const message = 'Duplicate field value entered';
    error = new ErrorResponse(message, 400);
  }

  // Mongoose validation error
  if (err.name === 'ValidationError') {
    const message = Object.values(err.errors).map(val => val.message);
    error = new ErrorResponse(message, 400);
  }

  res.status(error.statusCode || 500).json({
    success: false,
    error: error.message || 'Server Error'
  });
};
```

#### Custom Error Response Class
```javascript
class ErrorResponse extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
  }
}
```

### Frontend Error Handling
- Try-catch blocks for all API calls
- User-friendly error messages
- Toast notifications for errors
- Fallback UI for failed component renders
- Retry mechanisms for failed requests
- Network error detection

---

## 21. Additional Advanced Features

### A. Notification System
Implement in-app notifications for:
- Project funding milestones (25%, 50%, 75%, 100%)
- New comments on user's projects/comments
- Order status updates
- New products from followed creators
- Admin announcements

**Implementation:**
- Create Notification schema
- Real-time updates using polling (check every 30 seconds)
- Notification badge on navbar
- Notification dropdown with mark as read functionality

### B. Following System
- Users can follow creators
- Get notified when followed creators launch new projects
- "Following" page showing activity feed

### C. Share & Referral System
- Generate unique referral links
- Track referrals and reward users (discount codes, badges)
- Social media sharing with Open Graph meta tags

### D. Advanced Search with Filters
```javascript
// Search with multiple filters
GET /api/products/search?
  q=smartphone&
  category=electronics&
  minPrice=200&
  maxPrice=1000&
  status=Funding&
  rating=4&
  sort=deadline&
  page=1&
  limit=12
```

### E. Product Comparison
- Users can select up to 3-4 products to compare
- Side-by-side comparison table
- Compare: price, features, funding progress, ratings

### F. Creator Analytics Dashboard
Advanced metrics for creators:
- **Traffic Analytics**: Views over time, traffic sources
- **Engagement Metrics**: Comments, likes, shares
- **Conversion Funnel**: Views → Clicks → Backs
- **Demographics**: Backer locations (if available)
- **Revenue Forecasting**: Projected earnings based on current funding rate

### G. Admin Moderation Tools
- Flag inappropriate content (products, reviews, comments)
- Bulk actions (approve/reject multiple products)
- User activity logs
- Automated content moderation (basic keyword filtering)

---

## 22. Payment Flow Details

### A. Pre-Order Payment Flow (Crowdfunding)

**Step 1: User Backs a Project**
```javascript
// Frontend: Create payment intent
const response = await axios.post('/api/preorders/create-payment-intent', {
  productId,
  quantity,
  shippingAddress
});

const { clientSecret } = response.data;
```

**Step 2: Authorize Payment (Don't Capture)**
```javascript
// Frontend: Stripe Elements
const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
  payment_method: {
    card: cardElement,
    billing_details: { name: userName }
  },
  setup_future_usage: 'off_session'
});

// Backend: Create payment intent with manual capture
const paymentIntent = await stripe.paymentIntents.create({
  amount: totalPrice * 100, // cents
  currency: 'usd',
  capture_method: 'manual', // Don't capture immediately
  metadata: {
    productId: product._id.toString(),
    userId: user._id.toString()
  }
});
```

**Step 3: Store Pre-Order**
```javascript
// Backend: After successful authorization
const preOrder = await PreOrder.create({
  backer: userId,
  productConcept: productId,
  quantity,
  totalPrice,
  stripePaymentIntentId: paymentIntent.id,
  status: 'Authorized',
  shippingAddress
});

// Update product funding count
product.currentFunding += quantity;
await product.save();
```

**Step 4: Project Deadline Passes (Cron Job)**
```javascript
// If successful: Capture all authorized payments
if (project.currentFunding >= project.fundingGoal) {
  const preOrders = await PreOrder.find({
    productConcept: project._id,
    status: 'Authorized'
  });

  for (let preOrder of preOrders) {
    try {
      await stripe.paymentIntents.capture(preOrder.stripePaymentIntentId);
      preOrder.status = 'Paid';
      await preOrder.save();
    } catch (error) {
      // Handle failed captures
      console.error('Payment capture failed:', error);
    }
  }
  
  project.status = 'Successful';
  await project.save();
  // Send success emails
}

// If failed: Cancel all payment intents
else {
  const preOrders = await PreOrder.find({
    productConcept: project._id,
    status: 'Authorized'
  });

  for (let preOrder of preOrders) {
    try {
      await stripe.paymentIntents.cancel(preOrder.stripePaymentIntentId);
      preOrder.status = 'Cancelled';
      await preOrder.save();
    } catch (error) {
      console.error('Payment cancellation failed:', error);
    }
  }
  
  project.status = 'Failed';
  await project.save();
  // Send failure emails
}
```

### B. Marketplace Order Payment Flow

**Direct Capture** - Standard e-commerce flow:
```javascript
// Create and immediately capture payment
const paymentIntent = await stripe.paymentIntents.create({
  amount: totalAmount * 100,
  currency: 'usd',
  capture_method: 'automatic', // Capture immediately
  metadata: {
    orderId: order._id.toString()
  }
});
```

### C. Stripe Webhook Handler
```javascript
// Handle Stripe events
app.post('/api/webhooks/stripe', express.raw({type: 'application/json'}), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  
  let event;
  try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  // Handle the event
  switch (event.type) {
    case 'payment_intent.succeeded':
      // Update order/preorder status
      break;
    case 'payment_intent.payment_failed':
      // Handle failed payment
      break;
    // Add more cases as needed
  }

  res.json({received: true});
});
```

---

## 23. Email Notification System

### Email Templates
Create HTML email templates for:
1. **Welcome Email** - After registration
2. **Project Funded Successfully** - To creator and backers
3. **Project Failed** - To creator and backers
4. **Order Confirmation** - Marketplace purchase
5. **Order Shipped** - With tracking number
6. **Order Delivered** - Delivery confirmation
7. **Password Reset** - Reset link
8. **New Comment** - On user's project
9. **Project Update** - From creator to backers

### Implementation (using Nodemailer)
```javascript
// emailService.js
const nodemailer = require('nodemailer');

const transporter = nodemailer.createTransport({
  host: process.env.EMAIL_HOST,
  port: process.env.EMAIL_PORT,
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

const sendEmail = async (options) => {
  const mailOptions = {
    from: `LaunchPad Market <${process.env.EMAIL_USER}>`,
    to: options.to,
    subject: options.subject,
    html: options.html
  };

  await transporter.sendMail(mailOptions);
};

module.exports = sendEmail;
```

---

## 24. Database Indexing Strategy

### Critical Indexes for Performance
```javascript
// User model
userSchema.index({ email: 1 });

// ProductConcept model
productConceptSchema.index({ creator: 1 });
productConceptSchema.index({ category: 1 });
productConceptSchema.index({ status: 1 });
productConceptSchema.index({ slug: 1 }, { unique: true });
productConceptSchema.index({ deadline: 1 });
productConceptSchema.index({ createdAt: -1 });
productConceptSchema.index({ title: 'text', description: 'text', tags: 'text' }); // Text search

// Order model
orderSchema.index({ buyer: 1 });
orderSchema.index({ orderStatus: 1 });
orderSchema.index({ createdAt: -1 });

// PreOrder model
preOrderSchema.index({ backer: 1 });
preOrderSchema.index({ productConcept: 1 });
preOrderSchema.index({ status: 1 });

// Review model
reviewSchema.index({ product: 1 });
reviewSchema.index({ author: 1 });
```

---

## 25. Middleware Structure

### A. Authentication Middleware
```javascript
// authMiddleware.js
const protect = async (req, res, next) => {
  let token;
  
  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    token = req.headers.authorization.split(' ')[1];
  }

  if (!token) {
    return res.status(401).json({ success: false, error: 'Not authorized to access this route' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch (err) {
    return res.status(401).json({ success: false, error: 'Not authorized to access this route' });
  }
};

const authorize = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ 
        success: false, 
        error: `User role ${req.user.role} is not authorized to access this route` 
      });
    }
    next();
  };
};

module.exports = { protect, authorize };
```

### B. Validation Middleware
```javascript
// validationMiddleware.js
const { validationResult } = require('express-validator');

const validate = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ 
      success: false, 
      errors: errors.array() 
    });
  }
  next();
};

module.exports = validate;
```

### C. Async Handler
```javascript
// asyncHandler.js
const asyncHandler = fn => (req, res, next) =>
  Promise.resolve(fn(req, res, next)).catch(next);

module.exports = asyncHandler;
```

---

## 26. Controller Layer Structure

### Example: Product Controller
```javascript
// productController.js
const Product = require('../models/ProductConcept');
const asyncHandler = require('../middleware/asyncHandler');
const ErrorResponse = require('../utils/errorResponse');

// @desc    Get all products
// @route   GET /api/products
// @access  Public
exports.getProducts = asyncHandler(async (req, res, next) => {
  const { category, status, minPrice, maxPrice, sort, page = 1, limit = 12 } = req.query;
  
  let query = {};
  
  // Build query
  if (category) query.category = category;
  if (status) query.status = status;
  if (minPrice || maxPrice) {
    query.price = {};
    if (minPrice) query.price.$gte = minPrice;
    if (maxPrice) query.price.$lte = maxPrice;
  }
  
  // Execute query with pagination
  const skip = (page - 1) * limit;
  const products = await Product.find(query)
    .populate('creator', 'name profileImage')
    .sort(sort || '-createdAt')
    .skip(skip)
    .limit(parseInt(limit));
  
  const total = await Product.countDocuments(query);
  
  res.status(200).json({
    success: true,
    count: products.length,
    total,
    page: parseInt(page),
    pages: Math.ceil(total / limit),
    data: products
  });
});

// @desc    Create new product
// @route   POST /api/products
// @access  Private (Creator only)
exports.createProduct = asyncHandler(async (req, res, next) => {
  // Add creator from logged-in user
  req.body.creator = req.user.id;
  
  // Generate slug from title
  req.body.slug = req.body.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');
  
  const product = await Product.create(req.body);
  
  res.status(201).json({
    success: true,
    data: product
  });
});

// Additional controller methods...
```

---

## 27. Frontend Service Layer

### Example: API Service
```javascript
// services/api.js
import axios from 'axios';

const API = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Request interceptor to add token
API.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor for error handling
API.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // Token expired - redirect to login
      localStorage.removeItem('token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);

export default API;
```

```javascript
// services/productService.js
import API from './api';

export const productService = {
  getAllProducts: (params) => API.get('/products', { params }),
  getProductById: (id) => API.get(`/products/${id}`),
  createProduct: (data) => API.post('/products', data),
  updateProduct: (id, data) => API.put(`/products/${id}`, data),
  deleteProduct: (id) => API.delete(`/products/${id}`),
  uploadImages: (id, formData) => API.post(`/products/${id}/images`, formData, {
    headers: { 'Content-Type': 'multipart/form-data' }
  }),
  searchProducts: (query) => API.get('/products/search', { params: { q: query } }),
  likeProduct: (id) => API.post(`/products/${id}/like`)
};
```

---

## 28. Custom React Hooks

### useAuth Hook
```javascript
// hooks/useAuth.js
import { useContext } from 'react';
import { AuthContext } from '../context/AuthContext';

const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within AuthProvider');
  }
  return context;
};

export default useAuth;
```

### useDebounce Hook
```javascript
// hooks/useDebounce.js
import { useState, useEffect } from 'react';

const useDebounce = (value, delay = 300) => {
  const [debouncedValue, setDebouncedValue] = useState(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => clearTimeout(handler);
  }, [value, delay]);

  return debouncedValue;
};

export default useDebounce;
```

---

## 29. Installation & Setup Instructions

### Prerequisites
- Node.js (v16 or higher)
- MongoDB (v5 or higher) - Local or MongoDB Atlas
- npm or yarn
- Stripe account (for payment processing)
- Git

### Step-by-Step Setup

#### 1. Clone the Repository
```bash
git clone <repository-url>
cd launchpad-market
```

#### 2. Backend Setup
```bash
cd server
npm install

# Create .env file
cp .env.example .env
# Edit .env with your configuration

# Start MongoDB (if local)
mongod

# Run server
npm run dev  # Development with nodemon
npm start    # Production
```

#### 3. Frontend Setup
```bash
cd client
npm install

# Create .env file
cp .env.example .env
# Edit .env with your API URL

# Run development server
npm run dev

# Build for production
npm run build
```

#### 4. Database Seeding (Optional)
```bash
cd server
npm run seed  # Seed sample data
```

### Environment Setup

#### Server .env
```
NODE_ENV=development
PORT=5000
MONGO_URI=mongodb://localhost:27017/launchpad-market
JWT_SECRET=your_jwt_secret_key_min_32_characters
JWT_EXPIRE=24h
STRIPE_SECRET_KEY=sk_test_...
STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USER=your_email@gmail.com
EMAIL_PASS=your_app_specific_password
CLIENT_URL=http://localhost:5173
```

#### Client .env
```
VITE_API_URL=http://localhost:5000/api
VITE_STRIPE_PUBLISHABLE_KEY=pk_test_...
```

---

## 30. Production Deployment Checklist

### Pre-Deployment
- [ ] All environment variables configured
- [ ] MongoDB Atlas cluster created and configured
- [ ] Stripe account in production mode
- [ ] Email service configured
- [ ] CORS configured for production domain
- [ ] Rate limiting implemented
- [ ] File upload limits configured
- [ ] Security headers configured (Helmet.js)
- [ ] SSL certificate obtained
- [ ] Error logging service setup (optional)

### Backend Deployment
- [ ] Build production-ready code
- [ ] Configure PM2 or similar process manager
- [ ] Set up reverse proxy (Nginx recommended)
- [ ] Configure firewall rules
- [ ] Set up automated backups for MongoDB
- [ ] Configure Stripe webhooks with production URL
- [ ] Test all API endpoints in production

### Frontend Deployment
- [ ] Build optimized production bundle
- [ ] Configure environment variables for production
- [ ] Set up CDN for static assets
- [ ] Configure custom domain and DNS
- [ ] Test all pages and features
- [ ] Verify mobile responsiveness
- [ ] Check cross-browser compatibility

### Post-Deployment
- [ ] Monitor application logs
- [ ] Set up uptime monitoring
- [ ] Configure automated backups
- [ ] Document deployment process
- [ ] Create rollback plan
- [ ] Set up analytics (optional)

---

## 31. Future Enhancement Ideas

### Phase 2 Enhancements
1. **Real-time Chat** - Between creators and backers
2. **Video Support** - Product pitch videos
3. **Subscription Plans** - Premium creator accounts
4. **Multi-currency Support** - International payments
5. **Mobile App** - React Native version
6. **Social Features** - User profiles, activity feeds
7. **Advanced Analytics** - ML-based insights
8. **Affiliate Program** - Earn commissions for referrals
9. **Gift Cards** - Purchase and redeem gift cards
10. **Loyalty Program** - Points and rewards system

### Phase 3 Enhancements
1. **Live Streaming** - Product launch events
2. **NFT Integration** - Digital collectibles for backers
3. **DAO Governance** - Community voting on platform decisions
4. **Multi-vendor Marketplace** - Support for multiple sellers
5. **AR Product Preview** - Augmented reality product viewing
6. **Blockchain Verification** - Product authenticity verification

---

## 32. Final Deliverables Checklist

### Code
- [ ] Complete backend API (all endpoints functional)
- [ ] Complete frontend application (all pages implemented)
- [ ] Database schemas and models
- [ ] Authentication and authorization system
- [ ] Payment integration (Stripe)
- [ ] File upload functionality
- [ ] Search and filter system
- [ ] Email notification system
- [ ] Cron job for deadline checking
- [ ] Error handling throughout
- [ ] Input validation on all forms
- [ ] Security measures implemented

### Documentation
- [ ] README.md with setup instructions
- [ ] API_DOCUMENTATION.md
- [ ] Code comments in complex sections
- [ ] Environment variables documented
- [ ] Database schema diagram (optional)
- [ ] User flow diagrams (optional)

### Testing
- [ ] Manual testing of all features
- [ ] API endpoint testing (Postman collection)
- [ ] Cross-browser testing
- [ ] Mobile responsiveness testing
- [ ] Payment flow testing (test mode)

### Quality Assurance
- [ ] Code follows best practices
- [ ] No console errors or warnings
- [ ] Performance optimized
- [ ] Security vulnerabilities addressed
- [ ] Accessible UI components
- [ ] Clean and consistent code style

---

## 33. Success Metrics

### Key Performance Indicators (KPIs)
- Total registered users
- Active projects (Funding status)
- Successfully funded projects ratio
- Total revenue processed
- Average project funding time
- User retention rate
- Average order value
- Conversion rate (views to backs/purchases)

### Analytics to Track
- Page views per product
- Time spent on site
- Bounce rate
- Cart abandonment rate
- Search queries
- Popular categories
- Creator success rate

---

## 34. Legal & Compliance Considerations

### Terms to Include
- Terms of Service
- Privacy Policy
- Refund Policy
- Creator Agreement
- Backer Agreement
- Cookie Policy
- GDPR Compliance (if applicable)

### Recommendations
- Consult with legal professional for your jurisdiction
- Clearly state platform fees and policies
- Define responsibilities of creators and backers
- Outline dispute resolution process
- Include disclaimers about project risks

---

